generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  createdAt   DateTime   @default(now())
  categories  Category[]
  items       Item[]
  orders      Order[]
  users       User[]
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  name          String?
  role          Role     @default(employee)
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  createdAt     DateTime @default(now())
}

enum Role {
  owner
  admin
  employee
  customer
}

model Category {
  id            String   @id @default(uuid())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  name          String
  position      Int       @default(0)
  isActive      Boolean   @default(true)
  items         Item[]
}

model Item {
  id            String   @id @default(uuid())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  name          String
  description   String?
  ingredients   String?
  allergens     String?
  price         Decimal
  imageUrl      String?
  isActive      Boolean   @default(true)
  position      Int       @default(0)
  createdAt     DateTime  @default(now())
  orderItems    OrderItem[]
}

model Order {
  id            String   @id @default(uuid())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  type          OrderType @default(dine_in)
  status        OrderStatus @default(pending)
  tableNumber   String?
  total         Decimal    @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  items         OrderItem[]
  payments      Payment[]
}

enum OrderType { dine_in takeaway }
enum OrderStatus { pending preparing ready served cancelled paid }

model OrderItem {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      String
  quantity    Int      @default(1)
  unitPrice   Decimal
  note        String?
  serveFor    ServeFor @default(to_table)
  status      ItemStatus @default(pending)
  createdAt   DateTime @default(now())
}

enum ServeFor { to_table to_go }
enum ItemStatus { pending preparing ready served cancelled }

model Payment {
  id         String  @id @default(uuid())
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String
  method     PaymentMethod @default(cash)
  amount     Decimal
  paidAt     DateTime @default(now())
}

enum PaymentMethod { cash card pos online }
